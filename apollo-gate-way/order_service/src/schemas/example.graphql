scalar DateTime

extend type Query {
    """ Returns all products. They can be filtered by a producer. """
    getOrders: [Order!]

    """ Returns the specified product if found. """
    getOrder(orderId: ID!): Order

    getOrdersByConsumer(consumerId: ID!): Order

    getOrdersByProducer(producerId: ID!): Order

    getBill(orderId: ID!): Bill
}

extend type Mutation {
    """ Creates a new Product for a producer. """
    createOrder(orderInput: CreateOrderInput!) : Order!

    changeOrderStatus(statusInput: ChangeStatusInput!): Order!
}

input ChangeStatusInput{
    orderId: ID!,
    orderStatus: OrderStatusInput!
}

input CreateOrderInput {
    consumer: ConsumerInput!
    producer: ProducerInput!
    products: [ProductInput!]!
    total:Float!
    pickupStation: PickupStationInput!
    date: DateTime!
	orderStatus: OrderStatusInput!
    paymentMethod: PaymentMethod!
    bill: BillInput!
}

input PickupStationInput {
    locationId: ID!
	pickupDeadline: DateTime!
	name: String!
	pickupType: PickupType!
	address: AddressInput!
	openingHours: OpeningHoursInput!
}

input OpeningHoursInput{
    is_closed: Boolean!
    start: DateTime
    end: DateTime
}

input BillInput {
    consumerAddress: AddressInput!
	producerAddress: AddressInput!
	billNumber: Float!
	issueDate: DateTime!
	dueDate: DateTime!
	total: Float!
	products: [ProductInput!]!
	shippingPrice: Float!
	tax: Float!
	taxId: String
}

input AddressInput {
    street_name: String!
    street_number: String!
    city: String!
    zip_code: Int!
    country: String!
}

input ProductInput{
    id: ID!
    name: String!
    amount: Float!
    tax: Float!
    price: Float!
}

input ConsumerInput{
    consumerId: ID!
}

input ProducerInput{
    producerId: ID!
}

input OrderStatusInput{
    status: Status!
    data: DateTime!
}


type Order @key(fields: "id"){
    id: ID!
    consumer: Consumer! @provides(fields: "username")
    producer: Producer! @provides(fields: "username")
    products: [OrderedProduct!]!
    total:Float!
	pickupStation: PickupStation!
	date: DateTime!
	orderStatus: [OrderStatus!]!
    paymentMethod: PaymentMethod!
    bill: Bill!
}

type OrderStatus{
    status: Status!
    date: DateTime!
}

type Address {
    street_name: String!
    street_number: String!
    city: String!
    zip_code: Int!
    country: String!
}


enum Status {
	ORDERED
	PROCESSING
	PAID
	READY_NOTPAID
	READY
	CANCELED
	CLOSED
}

enum PaymentMethod {
	PAYPAL
	CREDIT_CARD
	BANK_TRANSFER
	CASH
}

enum PickupType {
	PRODUCER
	BIO_STORE
	RETAIL_STORE
	WAREHOUSE
}

type OpeningHours{
    is_closed: Boolean!
    start: DateTime
    end: DateTime
}

type OrderedProduct{
    productId: ID!
    productName: String!
    amount: Float!
    tax: Float!
    price: Float!
}

type Bill {
	consumerAddress: Address!
	producerAddress: Address!
	billNumber: Float!
	issueDate: DateTime!
	dueDate: DateTime!
	total: Float!
	products: [OrderedProduct!]!
	shippingPrice: Float!
	tax: Float!
	taxId: String
}

type PickupStation {
	locationId: ID!
	pickupDeadline: DateTime!
	name: String!
	pickupType: PickupType!
	address: Address!
	openingHours: OpeningHours!
}

extend type Consumer @key(fields: "id") {
  id: ID! @external
}

extend type Producer @key(fields: "id") {
  id: ID! @external
}